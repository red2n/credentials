name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.x, 22.x]

    steps:
    - uses: actions/checkout@v4

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run tests
      run: npm test

    - name: Build applications
      run: npm run build

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Run security audit
      run: npm audit --audit-level high

    - name: Scan Docker images
      uses: docker/scout-action@v1
      with:
        command: cves
        image: credentials/api:latest
        only-severities: critical,high

  build-and-push:
    needs: [test, security]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata (API)
      id: meta-api
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push API image
      uses: docker/build-push-action@v5
      with:
        context: ./apps/api
        file: ./apps/api/Dockerfile.production
        push: true
        tags: ${{ steps.meta-api.outputs.tags }}
        labels: ${{ steps.meta-api.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Extract metadata (UI)
      id: meta-ui
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/ui
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push UI image
      uses: docker/build-push-action@v5
      with:
        context: ./apps/ui
        file: ./apps/ui/Dockerfile
        push: true
        tags: ${{ steps.meta-ui.outputs.tags }}
        labels: ${{ steps.meta-ui.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
    - uses: actions/checkout@v4

    - name: Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG_STAGING }}

    - name: Deploy to staging
      run: |
        sed -i 's|credentials/api:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api:develop|g' k8s/03-api-deployment.yaml
        sed -i 's|credentials/ui:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/ui:develop|g' k8s/04-ui-deployment.yaml
        kubectl apply -f k8s/ -n credentials-staging

    - name: Wait for deployment
      run: |
        kubectl wait --for=condition=available --timeout=300s deployment/api-deployment -n credentials-staging
        kubectl wait --for=condition=available --timeout=300s deployment/ui-deployment -n credentials-staging

  deploy-production:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - uses: actions/checkout@v4

    - name: Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG_PRODUCTION }}

    - name: Deploy to production
      run: |
        sed -i 's|credentials/api:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api:latest|g' k8s/03-api-deployment.yaml
        sed -i 's|credentials/ui:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/ui:latest|g' k8s/04-ui-deployment.yaml
        kubectl apply -f k8s/ -n credentials-system

    - name: Wait for deployment
      run: |
        kubectl wait --for=condition=available --timeout=300s deployment/api-deployment -n credentials-system
        kubectl wait --for=condition=available --timeout=300s deployment/ui-deployment -n credentials-system

    - name: Run smoke tests
      run: |
        API_URL=$(kubectl get ingress credentials-ingress -n credentials-system -o jsonpath='{.spec.rules[0].host}')
        curl -f https://${API_URL}/health || exit 1
        curl -f https://${API_URL}/ || exit 1

  load-test:
    needs: deploy-production
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Run load tests
      run: |
        docker run --rm -v $PWD:/scripts grafana/k6:latest run /scripts/loadtest.js
